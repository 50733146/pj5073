var tipuesearch = {"pages": [{'title': 'About', 'text': '五專部專題題目: \n 網際內容管理系統在精密機械工程教學與研究上的應用 \n Application of Web-based Content Management Systems in Teaching and Research of Precision Mechanical Engineering \n 專題動機: \n 探討如何利用  Fossil SCM  虛擬與實體伺服器, 讓五專精密機械工程科相關師生, 得以透過學校配發的 @gm 帳號登入, 並在網際內容管理系統中進行知識管理與互動, 擬藉此提升課程教學與專題研究效益. \n 研究步驟: \n 從 Windows 與 Ubuntu 中編譯  Fossil SCM  套件開始, 分別取得 client 與 server 端的可執行檔案後, 將  Fossil SCM  安裝配置在一台實體或虛擬主機上, 利用 Python +  Flask  著手編寫  Oauth2  網際程式介面, 讓所有相關成員得以自建倉儲與網際內容管理系統, 之後再分門別類, 根據精密機械工程科學會的任務編組, 利用網際內容管理系統提供相關服務. \n 預計成果: \n \n 參與 eng.nfu.edu.tw 網域伺服器 (DNS) 與 G Suite 系統管理. \n 在 Ubuntu 虛擬主機上, 完成以  Fossil SCM  架設 pj5073.eng.nfu.edu.tw 精密機械工程科學會網站. \n 能讓獲得許可之相關人員, 透過 @gm 帳號登入科學會網站, 在各班對應網站上進行 Github 上同步網際內容管理維護或互動討論. \n 專題報告 pdf 檔案, 能夠在 github.com/mdecourse/pj5073 倉儲中的 pdf 分支, 以 Github Actions 流程發布. \n 專題簡報可直接在 mde.tw/pj5073/reveal/ 中發布. \n \n 組員: \n 50733105 \n 50733144 \n 50733146 \n 50733152 \n 教學與研究相關參考內容: \n Introduction to Automatic Control System.pdf \n Webots Inverted Pendulum: \n https://robotbenchmark.net/benchmark/inverted_pendulum/ \xa0 \n', 'tags': '', 'url': 'About.html'}, {'title': '主機設定', 'text': '本研究主要利用 Fossil SCM 的網際主機作為主體, 並配置 Python Flask 網際程式管理使用者 Oauth2 登入流程. 目的在建立一個可以為精密機械教學與研究使用的網際內容管理系統. \n 主機的設定分為 Windows 10 與 Ubuntu 20.04 等兩個部分. \n Fossil SCM 的網際主機以 fossil server 指令建立, 可以在近端主機的 port 9000 將資料送給 Stunnel 的 https port 443 協定代理. 使用者從外部可以利用瀏覽器直接以 https 協定連接至主機中的任一個 Fossil SCM 倉儲. \n Windows 10: \n 在 Windows 10 操作系統中 Multi-repository Fossil SCM 網際伺服器與 Stunnel HTTPS 協定代理的 service 設定, 可以利用  https://github.com/kirillkovalenko/nssm  的設定達成. \n Ubuntu 20.04: \n 在 Ubuntu 操作系統中的 Stunnel 可以利用 exec 與 execargs 設定啟動 Fossil SCM server, 且透過 /etc/default/stunnel4 檔案中的 ENABLED=1 啟動 service (參見  https://mde.tw/wcmj2021/blog/fossil-scm-on-ubuntu.html ). 而且在 Ubuntu 中可以利用 \n sudo systemctl start stunnel4.service \n 啟動  stunnel . \n sudo systemctl stop stunnel4.service \n 關閉  stunnel , 或利用: \n sudo systemctl restart stunnel4.service \n 重新啟動  stunnel . \n \n \n \n', 'tags': '', 'url': '主機設定.html'}, {'title': 'Windows 10', 'text': '以虛擬主機 pj2022.kmol.info 的設定為例: \n 設定過程所需要的檔案:  https://pj2022.kmol.info/pj2022/chat-download/1/pj2022_files.7z  (登入後下載), 其中包括 nssm.exe, procexp64.exe, fossil.exe, stunnel 目錄等. \n 要採 Fossil SCM 與 Stunnel 設定  https://pj2022.kmol.info  共有兩個 nssm service 必須建立: \n nssm install fossil_multi \n nssm install stunnel_fossil_flask \n 但是在建立這兩個 Windows 10 服務之前必須先使用 command 執行 fossil.exe 與 stunnel.exe, 確定所使用的設定參數正確後, 再將正確的參數用於 nssm 所建立的服務. \n Fossil SCM server 指令說明:  https://fossil-scm.org/home/help/server \n Stunnel 設定說明:  https://www.stunnel.org/docs.html \n Fossil SCM server 設定: \n 首先在 c:\\pj2022 目錄中建立 repo 目錄, 之後的 Fossil SCM 倉儲都將放入此目錄. \n cd 到 c:\\pj2022\\repo, 並執行  fossil.exe init  建立 pj2022.fossil 倉儲 \n c:\\pj2022\\repo>c:\\pj2022\\fossil.exe init pj2022.fossil \n 利用  fossil.exe user password  更改 pj2022.fossil 的管理者密碼. \n c:\\pj2022\\repo>c:\\pj2022\\fossil.exe user password username userpassword -R pj2022.fossil \n 接著以命令列設定 port 9000 的 Fossil SCM 網際主機. 設定的指令為: \n c:\\pj2022\\fossil.exe server c:\\pj2022\\repo --port 9000 --notfound pj2022.fossil \n 啟動時 Windows 10 將會帶出防火牆, 因為 fossil server 僅需要在內部網路運作, 可以無需開啟外部防火牆連線許可. 這時應該可以透過瀏覽器以  http://localhost:9000  連線到 pj2022.fossil 網際倉儲. \n 接下來因為 fossil.exe 必須採用 https 內容與 stunnel 互動. 因此與 stunnel https 結合的指令必須加上 --https, 也就是: \n c:\\pj2022\\fossil.exe server c:\\pj2022\\repo --port 9000 --https --notfound pj2022.fossil \n 但是啟動後因為尚未結合 stunnel https, 因此上列指令執行後,  http://localhost:9000  與  https://localhost:9000  都無法連線 (因為 fossil 指令納入 --https 的緣故), 必須結合 stunnel config 目錄中的 stunnel.conf 設定: \n ; TLS front-end to a web server\n[https]\naccept  = pj2022.kmol.info:443\nconnect = 9000\ncert = localhost.crt\nkey = localhost.key\nTIMEOUTclose = 0 \n 並且以 c:\\pj2022\\stunnel.exe 指令啟動, 並無需指定參數 config/stunnel.conf, stunnel.exe 執行時會自動以 config/stunnel.conf 作為設定參數, 此時執行 stunnel.exe Windows 10 也會跳出防火牆設定, 必須允許外部網路連線, 使用者才可以透過  https://pj2022.kmol.info  連接至 Fossil SCM 網際 pj2022.fossil 倉儲. \n 一旦上述採指令執行成功後, 就可以分別以 ctrl +c 取消 fossi 指令執行後, 並且利用 Process Explorer kill stunnel 執行後, 以 nssm 設定： \n nssm install fossil_multi 與 nssm install stunnel_fossil_flask 新增所需 Windows 服務. \n 其中 fossil_multi 服務的指令為 c:\\pj2022\\fossil.exe, 啟動目錄為 c:\\pj2022\\, 而啟動參數則為 server c:\\pj2022\\repo --port 9000 --https --notfound pj2022.fossil \n 而 stunnel_fossil_flask 服務的指令為 c:\\pj2022\\stunnel.exe, 啟動目錄為 c:\\pj2022\\, 啟動參數無需設定, stunnel.exe 會自動取用 config/stunnel.conf 設定. \n 之後便可以分別啟動 fossil_multi 與 stunnel_fossil_flask 等兩個服務, 查看是否能夠透過 self-signed 數位簽章進行  https://pj2022.kmol.info  連線. \n', 'tags': '', 'url': 'Windows 10.html'}, {'title': 'Win 網站簽章', 'text': 'Letsencrypt \n 由於先前利用 Stunnel 啟動的 https 所使用的 localhost.crt 與 localhost.key 為 self-signed, 使用者在連線至  https://pj2022.kmol.info  時必須接受此一數位簽章的 public key, 瀏覽器與伺服器之間才能進行資料編碼傳送. \n 若能透過 Let\'s Encrypt 網站所提供的第三方公證數位簽章, 將經過對網站符號名稱公開認證的數位簽章檔案提供給 Stunnel, 此簽章的 public key 就會存在公開的 key server 上, 使用者瀏覽  https://pj2022.kmol.info  時就可以直接從 public key server 取得 domain name 編碼用的資料, 進而直接以 https 協定連線. \n 以下即要說明如何透過  https://certbot.eff.org/  申請網站符號名稱的正式 https 數位簽章. \n 在 Windows 10 安裝 Nginx:\xa0 \n https://nginx.org/en/docs/windows.html \n 透過  https://certbot.eff.org/lets-encrypt/windows-nginx  所提供的流程申請數位簽章. \n 由於先安裝 Nginx 全球資訊網伺服器之後, 再安裝 certbot 套件後, 就可以直接透過 www 伺服器驗證網站的符號名稱, 因此取得公證數位簽章的第一步是安裝 Nginx, 而安裝 Nginx 的另外一個用處是, 之後可以利用 html redirect 的方式, 將 http 連線跳轉到 https. \n 由於 pj2022.kmol.info 伺服器只有設定 IPv6 網址, 因此在設定 Nginx 的時候, 必須注意是否啟動 listen IPv6 網路協定封包. 其中 listen [::]:80 指的就是接受 IPv6 封包, 而 listen :80 就只能接受 IPv4 封包. 另外就是 server_name 設定為 pj2022.kmo.info, 應該就可以啟動 Nginx, 之後則可以再利用 Nssm 將 Nginx 設為服務啟動. \n 至於 html redirect 的語法: \n <html>\n<head>\n<meta http-equiv="refresh" content="0; URL=https://pj2022.kmol.info" />\n</head>\n</html> \n 確定利用 Nginx 所設定的  http://pj2022.kmol.info  運作正常後, 就可以安裝  https://dl.eff.org/certbot-beta-installer-win32.exe , 然後在具管理者身份的命令列中執行: \n certbot certonly --webroot \n 提供必要資訊後就可以在 c:\\certbot 目錄中取得對應的 private key (privkey.pem) 與 public key (fullchain.pem). 之後再將 stunnel.conf 中的 localhost.key 與 localhost.crt 換成公證的數位簽章 keys 如下: \n ; TLS front-end to a web server\n[https]\naccept  = pj2022.kmol.info:443\nconnect = 9000\ncert = fullchain.pem\nkey = privkey.pem\nTIMEOUTclose = 0 \n 然後再重新啟動 stunnel_fossil_flask 服務即可正式完成  https://pj2022.kmol.info  的設定. \n', 'tags': '', 'url': 'Win 網站簽章.html'}, {'title': 'Win Oauth2', 'text': "這裡將要說明如何在 Windows 10 環境下配置  https://github.com/mdecourse/fossiloauth . 其中將牽涉如何透過  waitress  啟動 Flask, 此設定就如同在 Ubuntu 環境中以  uwsgi  啟動 Flask 網際程式流程, 目的都是希望能以最大效率執行 Flask 網際程式. \n 首先必須先將  fossiloauth  clone 到 c:\\pj2022 目錄下. \n c:\\pj2022>git clone  https://github.com/mdecourse/fossiloauth.git \n 然後在 fossiloauth 目錄中建立一個 waitress_server.py 伺服器啟動程式: \n # 執行前, 必須要先利用 pip install waitress 安裝 wairess 模組\n# 接著從 waitress 導入 serve\nfrom waitress import serve\n\n# 導入 fossiloauth\nimport fossiloauth\n\n# run fossiloauth.app with production waitress\nserve(fossiloauth.app, host='0.0.0.0', port=5000, url_scheme='https') \n 接下來的設定必須先登入一個 Gmail 帳號, 然後連結到  https://console.cloud.google.com  中建立 Oauth2 連線時所需的 credential:  https://console.cloud.google.com/apis/credentials . \n 由於目前所需的 Oauth2 認證採用全球資訊網 (Web) 介面, 因此還必須根據網站中的程式架構設定認證用的 uri 連結. \n 至於 Oauth2 認證希望採 Gmail 帳號, 因此還需至  https://console.cloud.google.com/apis/library  中 enabled Gmail API 的使用權限. \n 建立 credential 流程如下: \n 至  https://console.cloud.google.com/apis/credentials  建立一個專案. \n 在專案項下建立一組 web credential, 其中的 Authorised JavaScript origins 允許連線的 URIs 選擇設為: \n https://pj2022.kmol.info:8443,  而 Authorised redirect URIs 則可設為  https://pj2022.kmo.info:8443/login/google/  表示要使用 port 8443 作為讓使用者登入 Gmail 帳號認證的埠號. \n Credential 設定完成後, 可以 downlad 對應的 json 檔案, 以便將此 credential 的 client id 與 client secret 字串檔案, 存在 fossiloauth 目錄之外 (不可以將 credential json 檔案直接放入倉儲, 因為所推送的倉儲都是完全對外公開), 讓採  https://github.com/authomatic/authomatic  的 flaskoauth 能夠正常透過 waitress 啟動執行. \n 執行 flaskoauth 之前必須透過 pip install authomatic 安裝所需的模組套件. \n 一旦確認 python waitress_server.py 執行正確後, 就可以再利用 Nssm 以 python.exe 執行參數為 waitress_server.py 的系統服務, 例如: \n c:\\pj2022\\nssm install fossiloauth \n 由於上述 fossiloauth 是在內部網路以 port 5000 透過 waitress 執行, 因此仍必須利用 Stunnel 將內部 port 5000 的資料轉給外部 8443 的 https 協定連線, 在 config/stunnel.conf 中加入: \n [https]\naccept = 8443\nconnect = 5000\ncert = fullchain.pem\nkey = privkey.pem\nTIMEOUTclose = 0 \n 意即在加入 flaskoauth 程式執行後的 stunnel.conf 將成為: \n ; TLS front-end to a web server\n[https]\naccept  = pj2022.kmol.info:443\nconnect = 9000\ncert = fullchain.pem\nkey = privkey.pem\nTIMEOUTclose = 0\n\n[https]\naccept = 8443\nconnect = 5000\ncert = fullchain.pem\nkey = privkey.pem\nTIMEOUTclose = 0 \n 也就是內部的 fossil server 在 port 9000 啟動, 但透過 stunnel 接受外部的 port 443 https 連線, 而 flaskoauth 則在內部的 port 5000 以 waitress 啟動, 也是透過 stunnel 接受外部的 port 8443 https 連線. \n", 'tags': '', 'url': 'Win Oauth2.html'}, {'title': 'Oauth2 原理', 'text': '使用 Oauth2 協定讓使用者以 Gmail 帳號登入系統的目的, 在於無需管理使用者的帳號, 便能登入 Fossi SCM 網際系統, 具備使用 chat 與 forum 模組的權限. \n 實務上使用者登入後, 系統便會自動登出使用者的 Gmail 帳號, 並以 session 儲存使用者的帳號. \n 若使用者首次從 Oauth2 介面登入 Fossil SCM 網際系統, fossiloauth 網際程式會利用登入時所儲存的帳號資料, 在 Fossil SCM 網際系統 (即內定 repository) 中, 以隨機字串作為密碼, 建立能夠在 chat 與 forum 新增資料權限的帳號. 但該用戶因為無從得知與登入帳號對應的密碼, 因此無法利用該隨機密碼從 Fossill SCM 網際系統登入. \n 若使用者並非首次從 Oauth2 介面登入 Fossil SCM 網際系統, fossioauth 網際程式則會產生一組隨機字串修改該用戶登入時的對應密碼, 以便讓該用戶能夠利用新的隨機密碼登入, 進而編輯或新增 chat 與 forum 模組中的資料. \n 至於 fossiloauth 取得使用者登入帳號後, 配合隨機產生的字串作為密碼, 能夠在執行 /forum 函式後, 被 Fossil SCM 網際系統視為已經採特定身份 (可在程式中進行設定) 登入的設計, 則是利用 AJAX 將登入帳號與對應密碼以 post 送至 Fossil SCM 網際主機所建立的 session, 以 redirect 的方式轉址至 Fossil SCM 網際 forum 連結, 讓使用者被系統視為已經登入. \n 而此一 /forum 的程式設計如下: \n @app.route(\'/forum\')\n@login_required\ndef forum():\n    """Create forum routine"""\n    # 從倉儲中取出該帳號對應的密碼\n    username, userpass = repo()\n    with requests.Session() as s:\n        url = \'https://c1.kmol.info/pj2022/login\'\n        # "u" is the username input name for Fossil login form\n        # \'p\' is the password input name for Fossil login form\n        post_var = {\'u\': username, \'p\': userpass}\n        headers = {\'X-Requested-With\': \'XMLHttpRequest\'}\n        result = s.post(url, data = post_var, headers = headers)\n        cookie = s.cookies.get_dict()\n        key = list(cookie.keys())[0]\n        value = cookie[key]\n\n        forum = "https://c1.kmol.info/pj2022/forum"\n        response = make_response(redirect(forum))\n        response.set_cookie(key, value, domain="c1.kmol.info", expires=None, path="C:/tmp")\n        # logout from 8443\n        logout()\n        return response   \n \n', 'tags': '', 'url': 'Oauth2 原理.html'}, {'title': 'Ubuntu設定', 'text': 'fcitx 中文輸入法安裝: \n sudo apt install fcitx fcitx-chewing \n 表示將採用 fcitx 中文輸入法中的酷音輸入套件. \n 酷音輸入法的使用牽涉3個步驟, 第1步驟就是上方的套件安裝, 而第2步驟就是進入系統設定中的 language support, 將原先內建的 ibus 改為 fcitx, 而第3步驟則是在輸入 configure 時, 加入 chewing 中文輸入法, 並且將原先的切換鍵 space 改為 ctrl+space. \n 網路設定: \n Ubuntu 21.10 的網路設定取決於 /etc/netplan/net.yaml 檔案設定, 可先將原先的 .yaml 改名為 net.yaml: \n sudo mv /etc/netplan/*.yaml /etc/netplan/net.yaml \n Network configuration file: \n /etc/netplan/net.yaml \n # Let NetworkManager manage all devices on this system\nnetwork:\n  ethernets:\n    enp0s3:\n      dhcp4: false \n      addresses:\n        #- ipv4_address/24\n        - ipv6_address/64 \n      #gateway4:  ipv4_gateway.254\n      gateway6: ipv6_gateway::254\n      nameservers:\n        addresses:\n          - 2001:b000:168::1\n  version: 2\n  #renderer: NetworkManager \n 每次修改為 /etc/netlan/net.yaml 後必須重新載入設定內容: \n sudo netplan apply \n 在 Ubuntu 操作系統安裝 Fossil SCM server 只需先確認 fossil 的執行位置並且安裝設定 stunnel 即可. \n 安裝 stunnel: \n sudo apt update \n sudo apt install stunnel4 -y \n 安裝 fossil: \n sudo apt install fossil \n 環境變數與開機啟動設定: \n /etc/environment 設定: \n HTTPS=on \n /etc/default/stunnel4 檔案設定: \n ENABLED=1 \n 建立 localhost.key 與 localhost.crt: \n sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt \n 利用 Stunnel 的 exec 與 execargs 執行 fossil command: \n 設定檔案 /etc/stunnel/stunnel.conf: \n [https]\naccept = :5443\naccept = :::5443\ncert = /etc/stunnel/localhost.crt\nkey = /etc/stunnel/localhost.key\nexec = /usr/bin/fossil\nexecargs = /usr/bin/fossil http /home/wcm2021/repository/ --https --nojail --notfound cmstemplate \n 表示利用 stunnel 執行 fossil 指令, 並且透過 http 協定啟動 位於 /home/wcm2021/repository 目錄下的倉儲壓縮檔案, 且附加採用 https 與 nojail 模式啟動. \n 其中 --nojail 目的在 drop the root privilege but do not enter the chroot jail, 其後的 --notfound 表示若沒有特別在 URL 中列出所要擷取的 .fossil 檔案 (指位於 /home/wcm2021/repository/ 目錄下), 則採用 cmstemplate.fossil \n 重新啟用 stunnel: \n sudo /etc/init.d/stunnel4 restart', 'tags': '', 'url': 'Ubuntu設定.html'}, {'title': 'Ubuntu 簽章', 'text': '連線至  https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx \n snap 上網之前, 必須檢查 /etc/environment 中的代理主機設定. \n PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"\nHTTPS=on\nhttp_proxy=http://[2001:288:6004:17::Proxy_ip]:3128\nhttps_proxy=http://[2001:288:6004:17::Proxy_ip]:3128 \n 其中的 HTTPS=on 是針對 Stunnel, 而 http_proxy 與 https_proxy 則可為 snap 安裝套件時採用. \n 首先確定 snapd 使用最新版本: \n sudo snap install core; sudo snap refresh core \n 接著安裝 certbot: \n sudo snap install --classic certbot \n sudo ln -s /snap/bin/certbot /usr/bin/certbot \n 只取 certificate: \n sudo certbot certonly --nginx \n 一旦執行完成, 即可取得與 domain name 對應的 certificates: \n Successfully received certificate.\nCertificate is saved at: /etc/letsencrypt/live/domain_name/fullchain.pem\nKey is saved at:         /etc/letsencrypt/live/domain_name/privkey.pem \n 之後利用 sudo cp -r /etc/letsencrypt/archive /home/wcm2021/, 然後利用 sudo chown -R wcm2021:wcm2021 /home/wcm2021/archive, 接著將 archive 目錄中的 fullchain.pem 與 privkey.pem 複製至 /etc/stunnel/, 然後編輯 stunnel.conf, 利用 fullchain.pem 取代 localhost.crt, 利用 privkey.pem 取代 localhost.key, 重新啟動 stunnel: \n sudo /etc/init.d/stunnel4 restart \n 之後 Stunnel (也就是 Fossil SCM server) 應該就可以正確使用 https 協定. \n 接著編輯 /etc/nginx/sites-available/default, 將 localhost.crt 換為 fullchain.pem, localhost.key 換為 privkey.pem, 然後以 /etc/init.d/nginx restart 重新啟動 nginx, 之後的 Flask 網際程式應該就能以正式的 https 連線. \n 測試自動 renew certificate: \n sudo certbot renew --dry-run', 'tags': '', 'url': 'Ubuntu 簽章.html'}, {'title': '配置 uwsgi', 'text': '在 Ubuntu 環境中可透過 uwsgi 執行 Flask 網際程式. 並且利用 Nginx 配置 Let\'s Encrypt 數位簽章. \n 安裝 Nginx WWW 伺服器: \n 在 Ubuntu 安裝 nginx 伺服器: \n sudo apt install nginx \n 其中必須注意的是, apt 將使用 /etc/apt.conf 中所設定的 proxy 進行網路連線. \n apt.conf 設定格式為: \n Acquire::http::Proxy "http://[2001:288:6004:17::proxy_ip]:3128"; \n Acquire::https::Proxy "http://[2001:288:6004:17::proxy_ip]:3128"; \n /etc/nginx/sites-available/default 參考檔案: \n server {\n    listen 80;\n    listen [::]:80;\n    root /home/wcm2021/newcms;\n    index index.html;\n  \n    location /static {\n        alias /home/wcm2021/newcms/cmsimde/static/;\n    }\n  \n    location /downloads {\n        alias /home/wcm2021/newcms/downloads/;\n    }\n  \n    location /images {\n        alias /home/wcm2021/newcms/images/;\n    }\n  \n    location / {\n            try_files $uri $uri/ =404;\n    } \n      \n    location /blog {\n        alias /home/wcm2021/cmsimfly/blog/;\n    }\n  \n    location /reveal {\n        alias /home/wcm2021/cmsimfly/reveal/;\n    }\n}\n  \nserver {\n    listen 443 ssl;\n    #listen [::]:443 ssl ipv6only=on;\n   \n    location /static {\n        alias /home/wcm2021/cmsimfly/static/;\n    }\n   \n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8080;\n    }\n   \n    #server_name ipv4_ip; \n    #ssl on;\n    ssl_certificate /etc/stunnel/localhost.crt;\n    ssl_certificate_key /etc/stunnel/localhost.key;\n    ssl_session_timeout 5m;\n    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";\n    ssl_prefer_server_ciphers on;\n    try_files $uri $uri/ =404;\n}\n   \nserver {\n    #listen 89 default_server;\n    #listen [::]:89 default_server ipv6only=on;\n   \n    listen 8943 ssl;\n    #listen [::]:8943 ssl ipv6only=on;\n   \n    location /static {\n        alias /home/wcm2021/cmsimfly2/static/;\n    }\n   \n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8082;\n    }\n   \n    #server_name ipv4_ip;\n    #ssl on;\n    ssl_certificate /etc/stunnel/localhost.crt;\n    ssl_certificate_key /etc/stunnel/localhost.key;\n    ssl_session_timeout 5m;\n    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";\n    ssl_prefer_server_ciphers on;\n    try_files $uri $uri/ =404;\n}\n  \nserver {\n    #listen 88 default_server;\n    #listen [::]:88 default_server ipv6only=on;\n   \n    listen 8843 ssl;\n    #listen [::]:8843 ssl ipv6only=on;\n   \n    location /static {\n        alias /home/wcm2021/newcms/cmsimde/static/;\n    }\n   \n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8081;\n    }\n   \n    #server_name ipv4_ip;\n    #ssl on;\n    ssl_certificate /etc/stunnel/localhost.crt;\n    ssl_certificate_key /etc/stunnel/localhost.key;\n    ssl_session_timeout 5m;\n    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";\n    ssl_prefer_server_ciphers on;\n    try_files $uri $uri/ =404;\n} \n uwsgi 環境準備: \n sudo apt install uwsgi uwsgi-plugin-python3 \n sudo pip3 install uwsgi \n 編輯的設定檔案為 uwsgi_ini 目錄中的各個 .ini 設定檔案. \n uwsgi.ini 參考檔案: \n [uwsgi]\nsocket = 127.0.0.1:8080\nuid = kmol2019\ngid = kmol2019\nplugins-dir = /usr/lib/uwsgi/plugins/\nplugin = python3\nmaster = true\nlogto = /var/log/uwsgi/emperor.log\nlogfile-chown = kmol2019:kmol2019\nprocesses = 4\nthreads = 2\nchdir = /home/kmol2019/cmsimfly\nwsgi-file = /home/kmol2019/cmsimfly/wsgi.py \n python3 環境準備: \n 安裝 pip3: \n sudo apt install python3-pip \n 安裝 CMSiMDE 所需模組: \n sudo pip3 install flask bs4 lxml flask_cors pelican markdown leo pyopenssl \n CMSiMDE 的設定: \n init.py 中必須將 uwsgi = False 改為 True, 因為準備採用 uwsgi 模式啟動 CMSiMDE \n apt proxy 設定檔案: \n 啟動 uwsgi 指令, 將會逐一啟動 wsgi_ini 目錄中個別 .ini 檔案: \n sudo /usr/bin/uwsgi --emperor /home/kmol2019/wsgi_ini \n 最後則設定 Ubuntu 系統服務, 用來啟動 uwsgi: \n /etc/systemd/system 的 cmsimde.service 服務啟動檔案內容: \n [Unit]\nDescription=uWSGI to serve CMSiMDE\nAfter=network.target\n  \n[Service]\nUser=kmol2019\nGroup=kmol2019\nWorkingDirectory=/home/kmol2019/uwsgi_ini\nExecStart=/usr/local/bin/uwsgi --emperor /home/kmol2019/uwsgi_ini\n  \n[Install]\nWantedBy=multi-user.target \n 接著將 cmsimde 服務設為隨系統開機啟動: \n sudo systemctl enable cmsimde \n 若要取消 cmsimde 服務隨系統開機啟動: \n sudo systemctl disable cmsimde \n 手動啟動 cmsimde.service 服務 \n sudo systemctl start cmsimde \n 手動停止 cmsimde.service 服務 \n sudo systemctl stop cmsimde \n 最後, 在 Ubuntu 虛擬主機中設定 Fossil SCM: \n 安裝 fossil: \n sudo apt install fossil \n 查 fossil 版本: \n fossil version \n 接下來為了要在 https 的模式下使用 Fossil SCM 伺服器, 因此必須安裝配置 stunnel: \n sudo apt install stunnel \n 修改 /etc/environment, 加入: \n HTTPS=on \n 修改 /etc/default/stunnel4, 修改 ENABLED=1 \n 假如此時 /etc/stunnel 目錄下尚無 localhost.crt 與 localhost.key, 可以利用下列指令建立: \n 建立 localhost.key 與 localhost.crt: \n sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt \n 接著設定 /etc/stunnel/stunnel.conf 如下: \n [https]\naccept = kmol2019:5443\n# 只先啟用 ipv4\n#accept = :::443\ncert = /etc/stunnel/localhost.crt\nkey = /etc/stunnel/localhost.key\nexec = /usr/bin/fossil\nexecargs = /usr/bin/fossil http /home/kmol2019/repository/ --https --nojail --notfound kmol2019 \n 表示利用 stunnel 執行 fossil 指令, 並且透過 http 協定啟動 位於 /home/kmol2019/repository 目錄下的倉儲壓縮檔案, 且附加採用 https 與 nojail 模式啟動. \n 其中 --nojail 目的在 drop the root privilege but do not enter the chroot jail, 其後的 --notfound 表示若沒有特別在 URL 中列出所要擷取的 .fossil 檔案 (指位於 /home/kmol2019/repository/ 目錄下), 則採用 kmol2019.fossil \n 重新啟用 stunnel: \n sudo /etc/init.d/stunnel4 restart', 'tags': '', 'url': '配置 uwsgi.html'}, {'title': 'fossiloauth', 'text': '以下在整理 fossiloauth 相關設定參數, 擬改寫時將所有設定存入 config.py, 然後導入主要程式中運用. \n 當配置 fossiloauth 網際程式時, 需要: \n Google oauth2 client key and secret 檔案 (必須放在倉儲以外的目錄): \n 例如: \n 第一列: 214-this_is_key.apps.googleusercontent.com \n 第二例: this_is_secret-pktheSAqSunfu \n Fossil SCM server domain name: 例如: c1.kmol.info \n Fossil SCM server repository name: 例如: pj2022 \n 從 domain name 與 repository name 得知: \n Login 連結:  https://c1.kmol.info/pj2022/login \n Forum 連結:  https://c1.kmol.info/pj2022/forum \n 自建 Fossil SCM 帳號權限: 例如: \'bfjk234C\' \n 自建 Fossil SCM 倉儲存放位置: 例如: path = "c:\\pj2022\\repo" \n fossiloauth 網際程式執行 URL: 例如:  https://c1.kmol.info:8443 , 以及執行 forum 連結  https://c1.kmol.info:8443/forum  (目的在透過 AJAX 將登入帳號與密碼送至 Server, 以便取得登入 Fossil SCM server 的 session). \n 以上這些設定應該要寫入 config.py \n 因為要改寫 fossiloauth, 因此在 Ubuntu 安裝 Leo: \n sudo pip3 install leo \n 安裝結束後, 以 leo& 啟動. \n', 'tags': '', 'url': 'fossiloauth.html'}, {'title': 'foauth_config', 'text': 'config.py content: \n import authomatic\nfrom authomatic.providers import oauth2\n\n# read client_id and client_secret from safe place other than put into script\n# use scrum4 At mde to get credential data\n# credential url: https://console.cloud.google.com\nkeyFile = open(\'./../scrum2_client_secret.txt\', \'r\')\nwith open(\'./../scrum2_client_secret.txt\', \'r\') as f:\n    key = f.read().splitlines()\n\nCONFIG = {\n        \'google\': {\n            \'class_\': oauth2.Google,\n            \'consumer_key\': key[0],\n            \'consumer_secret\': key[1],\n            \'scope\': oauth2.Google.user_info_scope\n        }\n    }\n\ndomain_name = "c2.kmol.info"\ndefault_repo = "pj2022"\nrepo_caps = "bfjk234C"\n# for Windows \n#repo_path = "c:/pj2022/repo/"\n# for Ubuntu\nrepo_path = "/home/wcm2021/repository/"\nfossil_port = "5443"\nflask_port = "8443"\nuwsgi = True\n\n# derived\ndefault_repo_path = repo_path+default_repo+".fossil"\nflask_url = "https://"+domain_name+":"+flask_port\nflask_forum = "https://"+domain_name+":"+flask_port+"/forum"\nlogin_url = "https://"+domain_name+":"+fossil_port+"/"+default_repo+"/login"\nforum_url = "https://"+domain_name+":"+fossil_port+"/"+default_repo+"/forum"\nCALLBACK_URL = flask_forum \n wsgi.py \n import fossiloauth\nimport config\n\nuwsgi = config.uwsgi\n\ndomain_name = config.domain_name\nport = config.flask_port\n\napplication = fossiloauth.app\n\nif __name__ == "__main__":\n    \n    if uwsgi:\n        application = fossiloauth.app\n    else:\n        domain_name = "127.0.0.1"\n        fossiloauth.app.run(host=domain_name, port=port, ssl_context=\'adhoc\')\n         \n templates/login.html: \n ## index.html\n<%inherit file="base.html"/>\n\n<%block name="header">\n    <!-- this is some header content -->\n</%block>\n\n<!-- this is the body content. -->\n\n    <a href="/index">Home</a>\n    \n    ## Check for errors.\n    % if result.error:\n        <h2>Damn that error: ${ result.error.message }</h2>\n    % endif\n    \n    ## Welcome the user.\n    % if result.user:\n        <h1>Hi ${result.user.name}</h1>\n        <h2>Your id is: ${ result.user.id }</h2>\n        <h2>Your email is: ${ result.user.email }</h2>\n    % endif\n\n<!-- after GMail login process, use javascript to logout GMail account, and redirect to callbackurl  -->\n<!-- use jinia2 template format -->\n<script type="text/javascript">\nwindow.location="https://www.google.com/accounts/Logout?continue=https://appengine.google.com/_ah/logout?continue=${CALLBACK_URL}";\n</script> \n /etc/nginx/sites-available/default \n start nginx: sudo /etc/init.d/nginx start \n stop nginx: sudo /etc/init.d/nginx stop \n restart nginx: sudo /etc/init.d/nginx restart \n server {\n\tlisten 80 default_server;\n\tlisten [::]:80 default_server;\n\n        root /home/wcm2021/github/cmstemplate/;\n\n\tindex index.html index.htm index.nginx-debian.html;\n\n\tserver_name _;\n\n\tlocation / {\n\t\t# First attempt to serve request as file, then\n\t\t# as directory, then fall back to displaying a 404.\n\t\ttry_files $uri $uri/ =404;\n\t}\n\n}\n\n# 443 with uwsgi \nserver {\n    listen 443 ssl default_server;\n    listen [::]:443 ssl default_server;\n   \n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8080;\n    }\n   \n    ssl_certificate /etc/stunnel/fullchain.pem;\n    ssl_certificate_key /etc/stunnel/privkey.pem;\n    ssl_session_timeout 5m;\n    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";\n    ssl_prefer_server_ciphers on;\n    try_files $uri $uri/ =404;\n}\n\n# 8443 with uwsgi for fossiloauth\nserver {\n    listen 8443 ssl default_server;\n    listen [::]:8443 ssl default_server;\n   \n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8081;\n    }\n   \n    ssl_certificate /etc/stunnel/fullchain.pem;\n    ssl_certificate_key /etc/stunnel/privkey.pem;\n    ssl_session_timeout 5m;\n    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";\n    ssl_prefer_server_ciphers on;\n    try_files $uri $uri/ =404;\n} \n /home/wcm2021/uwsgi_ini/flask_oauth.ini \n [uwsgi]\nsocket = :8081\nuid = wcm2021\ngid = wcm2021\nplugins-dir = /usr/lib/uwsgi/plugins/\nplugin = python3\nmaster = true\nprocess = 4\nthreads = 2\nchdir = /home/wcm2021/fossiloauth\nwsgi-file = /home/wcm2021/fossiloauth/wsgi.py \n /home/wcm2021/uwsgi_ini/uwsgi.ini \n [uwsgi]\nsocket = :8080\nuid = wcm2021\ngid = wcm2021\nplugins-dir = /usr/lib/uwsgi/plugins/\nplugin = python3\nmaster = true\nprocess = 4\nthreads = 2\nchdir = /home/wcm2021/github/cmstemplate\nwsgi-file = /home/wcm2021/github/cmstemplate/cmsimde/wsgi.py \n /etc/systemd/system/cmsimde.service \n 列出 Ubuntu 中目前已經啟動的系統服務, 可以在終端機視窗中輸入: \n service --status-all \n enable cmsimde.service: sudo systemctl enable cmsimde \n disable cmsimde.service: sudo systemctl disable cmsimde \n start cmsimde.service: sudo systemctl start cmsimde \n stop cmsimde.service: sudo systemctl stop cmsimde \n restart cmsimde.service: sudo systemctl restart cmsimde \n [Unit]\nDescription=uWSGI to serve CMSiMDE\nAfter=network.target\n   \n[Service]\nUser=wcm2021\nGroup=wcm2021\nWorkingDirectory=/home/wcm2021/uwsgi_ini\nExecStart=/usr/bin/uwsgi --emperor /home/wcm2021/uwsgi_ini\n   \n[Install]\nWantedBy=multi-user.target \n /etc/stunnel to start with system: \n 修改 /etc/default/stunnel4, 修改 ENABLED=1 \n 然後以: \n sudo /etc/init.d/stunnel4 restart \n to restart', 'tags': '', 'url': 'foauth_config.html'}, {'title': 'Reference', 'text': '', 'tags': '', 'url': 'Reference.html'}, {'title': 'Flutter', 'text': 'https://flutter.dev/ \n 下載 kmol_project_2021.7z  可攜程式系統 \n References: \n https://medium.com/analytics-vidhya/deploy-ml-models-using-flask-as-rest-api-and-access-via-flutter-app-7ce63d5c1f3b \n https://github.com/SHARONZACHARIA/Deploy-ML-model \n https://nitishk72.medium.com/flutter-uploading-image-to-server-aec76876b9e1 \n https://stackoverflow.com/questions/51161862/how-to-send-an-image-to-an-api-in-dart-flutter \n https://stackoverflow.com/questions/60614857/how-to-post-an-image-as-a-request-with-flask-server-api-in-dart-flutter \n https://dev.to/carminezacc/advanced-flutter-networking-part-1-uploading-a-file-to-a-rest-api-from-flutter-using-a-multi-part-form-data-post-request-2ekm \n https://flutter.dev/docs/cookbook/networking/send-data \n \n', 'tags': '', 'url': 'Flutter.html'}, {'title': 'Flutter ref', 'text': 'Flutter完整开发实战详解系列.pdf \n https://github.com/apgapg/flutter_physics_concepts \n https://rodolfohernan20.blogspot.com/2019/12/upload-files-to-server-with-flutter-web.html \n https://github.com/tekartik/sqflite \n https://stackoverflow.com/questions/54223929/how-to-do-a-database-query-with-sqflite-in-flutter \n https://github.com/rxlabz/algrafx \n https://github.com/KarimEbrahemAbdelaziz/drawapp \n https://github.com/KalleHallden/StudenServicesApp \n https://pub.dev/packages/github \n https://github.com/flutter/flutter_markdown \n https://github.com/Baseflow/flutter-geolocator \n https://github.com/apptreesoftware/flutter_barcode_reader \n https://github.com/tekartik/sqflite \n https://github.com/matteocrippa/flutter-nfc-reader \n https://github.com/CarGuo/gsy_github_app_flutter \n https://github.com/WinkMeter/flutter_socket_io \n https://paulhammant.com/2018/08/18/flutter-and-ui-automation/ \n 根據  https://stackoverflow.com/questions/49609889/flutter-doctor-doesnt-work-on-neither-command-prompt-or-powershell-window \n 在 Windows 10 環境時需要納入 c:\\windows\\system32 指令路徑搜尋. 而 flutter upgrade 時需要 powershell, 因此可攜程式啟動時, 可以將 Windows 10 的 %path% 放入 start.bat 中 path 設定順序最後一個搜尋路徑. \n https://flutter.dev/docs \n https://medium.com/dartlang/announcing-dart-2-5-super-charged-development-328822024970 \n https://medium.com/@adityadroid/60-days-of-flutter-creating-the-app-ea0407b472ae \n https://github.com/flutterkit/zerker \n https://www.reddit.com/r/FlutterDev/ \n https://github.com/flutter/flutter/projects \n https://github.com/flutter/samples \n https://github.com/apptreesoftware/flutter_map \n https://pub.dev/packages/p5 \n https://github.com/duytq94/flutter-chat-demo \n https://github.com/srplab/starcore_for_flutter \n https://blog.geekyants.com/building-a-2d-game-in-flutter-a-comprehensive-guide-913f647846bc \n https://github.com/mdecourse/flutter-galaxy-game \n https://flutterchina.club/docs/ \n Flutter 實戰:  https://book.flutterchina.club/  ( Github ) \n Flutter 與 Web 架構: \n https://medium.com/flutter/hummingbird-building-flutter-for-the-web-e687c2a023a8 \n Flutter 升級: \n flutter upgrade \n Flutter 移除 analytics: \n flutter config --no-analytics \n Flutter Tutorial: \n https://flutter.dev/docs/reference/tutorials \n https://github.com/FilledStacks/flutter-tutorials \n https://github.com/CarGuo/GSYGithubAppFlutter \n https://github.com/trending/dart \n Rendering: \n https://api.flutter.dev/flutter/rendering/CustomPainter-class.html \n \n Signature Pad: \n https://pub.dev/packages/signature_pad \n 第一步: \n 在校園網路或以 VPN 或設定代理主機, 下載  2019 Pratical Flutter 電子書 . \n 登入 @gm 電子郵箱後, 下載可放入 USB 隨身碟運作的可攜系統: \n 下載 kmol_project_2021.7z  可攜程式系統 \n 第二步: \n 解開 kmol_project_2021.7z, 並在執行手機程式開發的 Windows 10 64 位元電腦上安裝  https://www.bluestacks.com \n 之後, 我們可以直接啟動 Flutter 隨身系統後, 利用電腦上的 Bluestacks 執行手機程式. \n 第三步: \n 啟動 Flutter 可攜系統後, 可以直接在命令列中輸入 code, 啟動 Visual Studio Code 程式編輯系統. \n 第四步: \n 執行第二步在操作系統中所安裝的 Bluestacks, 開啟後, 在命令列中以 adb connect localhost:5555, 以便之後將 Visual Studio Code 中的 Flutter 程式結果呈現在 Bluestacks 虛擬手機畫面中. \n 由於 Bluestacks 採用與 Virualbox 相同的虛擬主機模式, 適合在 CPU 等級較低的電腦上執行開發, 也可以在 Visual Studio Code 中按下 Ctrl + Shift + P, 然後輸入 flutter, 除了可以新建 Flutter 專案外, 也可以透過 Android Virtual Devices 指令, 建立 emulator, 並將編譯完成的手機程式結果, 呈現在對應的 emulator 中. \n 當然, 若使用者已經安裝並設置 https://developer.android.com/studio/run/win-usb , 也可以直接利用 USB 連接實體 Android 手機進行程式開發測試. \n 參考資料 \n https://flutterbyexample.com/ \n https://proandroiddev.com/mythbuster-10-rumors-about-flutter-why-its-not-worse-than-android-kotlin-f1a1acbe587d \n 專案範例 \n https://github.com/alibaba/flutter-go \n https://medium.com/flutter-community/flutter-firebase-realtime-database-crud-operations-using-provider-c242a01f6a10 \n https://github.com/flutter-ui-challenges/flutter_web_challenge_googlemaps \n https://medium.com/flutter-community/writing-a-flutter-data-entry-form-app-for-a-rental-agency-e5a7dab20596 \n https://medium.com/flutter-community/using-svg-in-flutter-3dcf7b1dd713 \n https://medium.com/analytics-vidhya/deploy-ml-models-using-flask-as-rest-api-and-access-via-flutter-app-7ce63d5c1f3b \n https://github.com/wiltonribeiro/grocery_shop_flutter \n \n \n pubspec.yaml 中的支援版次表示法: \n https://stackoverflow.com/questions/53563079/what-is-the-caret-sign-before-the-dependency-version-number-in-flutters-pub \n 參考資料: \n https://github.com/flutter-devs/flutter_camera_demo \n https://github.com/nirav4273/flutter_hair_saloon \n Quick Dart <<  Previous   Next  >> Flutter Mobile \n', 'tags': '', 'url': 'Flutter ref.html'}, {'title': 'discourse', 'text': 'https://github.com/discourse/discourse \n https://jpme.eng.nfu.edu.tw \n', 'tags': '', 'url': 'discourse.html'}, {'title': '操作管理', 'text': "jpme.eng.nfu.edu.tw \n 論壇程式碼: /var/www/discourse \n 設定檔案: /var/www/discourse/config/site_settings.yml \n nginx 設定檔案位置: /etc/nginx/conf.d/discourse.conf \n ssl_certificate 位於: /etc/letsencrypt/live/jpme.eng.nfu.edu.tw/fullchain.pem \n ssl_certificate_key 位於: /etc/letscrypt/libe/jpme.eng.nfu.edu.tw/privkey.pem \n 重新啟動 sudo systemctl restart discourse \n 重新啟動 bind9: sudo service bind9 restart \n Let's encrypt 改變 domain name: \n sudo certbot --nginx -d jpme.eng.nfu.edu.tw \n 為了讓 discourse 可以利用 Gmail SMTP replay 寄信, netplan 設定需要 \n dhcp6: no \n accetp-ra: no \n accept-ra (bool) Accept Router Advertisement that would have the kernel configure IPv6 by itself. When enabled, accept Router Advertisements. When disabled, do not respond to Router Advertisements. If unset use the host kernel default setting. \n \n", 'tags': '', 'url': '操作管理.html'}, {'title': 'cd2020pj1', 'text': 'https://github.com/mdecourse/cd2020pj1 \n Python 網際框架採用:  https://flask.palletsprojects.com \n Oauth2 認證採用:  https://github.com/authomatic/authomatic \n 資料庫採用: sqlite3 \n 之後部署至  Heroku  預計使用  https://elements.heroku.com/addons/heroku-postgresql \n Flask upload: \n https://github.com/bboe/flask-image-uploader \n', 'tags': '', 'url': 'cd2020pj1.html'}, {'title': 'Oauth2', 'text': '目前的 cd2020pj1 採用 authomatic: \n https://github.com/authomatic/authomatic \n https://pypi.org/project/python-oauth2/ \n', 'tags': '', 'url': 'Oauth2.html'}, {'title': 'Network', 'text': 'https://www.wireshark.org/ \n https://github.com/mgriffin/graphviz_network \n', 'tags': '', 'url': 'Network.html'}, {'title': 'Ref', 'text': '', 'tags': '', 'url': 'Ref.html'}, {'title': 'LaTeX', 'text': 'https://github.com/latextemplates/scientific-thesis-template \n', 'tags': '', 'url': 'LaTeX.html'}, {'title': 'Automatic Control', 'text': 'BookPythonForControl.pdf \n http://python-control.sourceforge.net/manual/ \n https://github.com/python-control/python-control \n https://pypi.org/project/control/ \n https://www.cds.caltech.edu/~murray/wiki/Control_Systems_Library_for_Python \n', 'tags': '', 'url': 'Automatic Control.html'}, {'title': '參考步驟', 'text': '1. 閱讀 \n 2010 Feedback and Control for Everyone: \n https://link.springer.com/book/10.1007/978-3-642-03446-6 \n 了解基本回授, 控制名詞與原理 \n 2. 閱讀 \n 2012 Mechatronic Systems:\xa0 \n https://link.springer.com/book/10.1007/978-3-642-22324-2 \xa0 \n 了解機電系統與傳統與現代設計方法, 導入 Sympy 與  https://github.com/python-control/python-control,   2019 Python for Control.pdf  與  Symbolic Computing in Python.pdf \n 3. 學習如何安裝配置 Ubuntu 20.04 實體與虛擬主機, 將  CMSiMDE  靜態與動態網站分別配置在實體與虛擬伺服器上. 學習如何將動態 Flask 程式部署至  Heroku. \n 4. 在 Ubuntu 20.04 伺服器上安裝 ubuntu-desktop 與  Xrdp , 安裝  CoppeliaSim , 透過 Remote Desktop Client 連至遠端伺服器, 以 interactive 及  headless  開啟  CoppeliaSim  場景檔案, 進行單機與網際  Python Remote API  模擬控制  CoppeliaSim  場景中的機電系統. \n 5. 將  https://github.com/mdecourse/vrep_inverted_pendulum  改為 Python3 以及 CoppeliaSim 4.1.0 rev1 版本 (若要在 Acer E5200 電腦上執行, 必須使用  V-rep 3.6.1 版 ) 相容. 以下為參考資料: \n https://github.com/mdecourse/vrep-stuff \n inverted pendulum system modeling \n simulation of the inverted pendulum.pdf \n solve the inverted pendulum problem using DQN algorithm \n https://in.mathworks.com/help/control/ug/control-of-an-inverted-pendulum-on-a-cart.html \n 其中的機電系統 3D 零組件可以採  NX12 ,  Onshape  或  Solvespace  繪製. \n', 'tags': '', 'url': '參考步驟.html'}, {'title': 'ebook1', 'text': '2010 Feedback and Control for Everyone: \n https://link.springer.com/book/10.1007/978-3-642-03446-6 \n Control and Feedback are everywhere. \n Feedback is information obtained from a system used to change its behavior. \n A system is causal (符合因果關係) when for any signal in the behavior the future cannot influence the past of the signal. Because in our discussions signals are functions of time, causality (因果關係) is an all too natural a property. It is indeed not conceivable that the presently experienced shower temperature could possibly depend on future positions of the water taps. Indeed, our shower is a causal system (因果系統). \n', 'tags': '', 'url': 'ebook1.html'}, {'title': 'Project', 'text': 'https://github.com/JuliaGraphics/Winston.jl \xa0(2D plot) \n https://juliagraphics.github.io/Gtk.jl/latest/ \xa0(GUI) \n https://github.com/JuliaGraphics/Cairo.jl \xa0(Graphics Library) \n Pango - Layout engine library \n https://discourse.julialang.org/t/julia-for-gui-app/416/20 \xa0 \n https://forum.gtkd.org/groups/GtkD/thread/57/ \xa0 \n \n Julia lang in machine learning.pdf \n https://diffeq.sciml.ai/dev/tutorials/ode_example/ \n 2019_Julia for robotics simulation and real-time control in a high-level programming language.pdf \n https://github.com/jdlangs/RobotOS.jl \n https://github.com/JuliaRobotics \xa0 \n https://juliarobotics.org/ \n https://juliahub.com/ui/Packages/PyCall/GkzkC/1.92.1 \n https://www.robinly.info/post/keno-fisher-co-founder-julia-computing-developing-the-programming-language-of-the-future \n First Semester Numerical Analysis course with Julia.pdf \n Julia - A fresh approach to numerical computing.pdf \n http://homepages.math.uic.edu/~jan/mcs471/index.html \xa0 \n https://github.com/mitmath/18330 \xa0 \n https://github.com/Djruhnke/numerical-analysis-julia \xa0 \n Julia language documentation: \n https://docs.julialang.org/en/v1/ \n \n \n \n \n \n', 'tags': '', 'url': 'Project.html'}, {'title': 'Ref2', 'text': 'https://github.com/brettkromkamp/topic-db \n https://en.wikipedia.org/wiki/Topic_map \n https://www.isotopicmaps.org/sam/ \n The FAIR GuidingPrinciples for scientific datamanagement and stewardship.pdf \n A_Collective_Knowledge_workflow_for_collaborative_.pdf \n https://github.com/ctuning/ck \n https://github.com/ctuning/ai \n https://github.com/ctuning/ck-tensorflow \n 2020_Collective Knowledge.pdf \n Reproducing 150 research papers: the problems and solutions \n https://github.com/thegrumpys/odop \n https://www.topicmaps.org/ \n https://www.topicmaps.org/datamodel/ \n A_data-driven_approach_for_understanding_Open_Desi.pdf \n https://fastpath2020.github.io/Program \n \n \n', 'tags': '', 'url': 'Ref2.html'}, {'title': 'Bond Graphs', 'text': 'https://github.com/mdecourse/BondGraphTools \xa0 \n https://www.gawthrop.net/Books/GawSmi96.pdf \xa0 \n Bond Graph Modeling.pdf \n Bond Graph Modeling and Simulation of Mechatronic.pdf \n bond_graph_modeling_postprint.pdf \n https://openmodelica.org/doc/OpenModelicaUsersGuide/latest/ompython.html \xa0 \n', 'tags': '', 'url': 'Bond Graphs.html'}, {'title': 'KMOLBrowser', 'text': '利用  pyside2  編寫的網際瀏覽器: \n KMOLBrowser 原始碼來自\xa0 https://github.com/ralsina/devicenzo , 為了用於 KMOLab 中 cmsimde self-signed certificate 近端或遠端編輯, 特別使用\xa0ignoreCertificateError(), 讓網頁可以直接導入. 執行時可攜系統需要 pip install pyside2 \n #!/usr/bin/env python3\n"""\nsource from: https://github.com/ralsina/devicenzo\n"""\n\nimport json\nimport os\nimport sys\n\nfrom PySide2 import QtCore, QtGui, QtNetwork, QtWebEngineWidgets, QtWidgets\n\nsettings = QtCore.QSettings("ralsina", "devicenzo")\n\n\ndef set_ssl_protocol():\n    default_config = QtNetwork.QSslConfiguration.defaultConfiguration()\n    default_config.setProtocol(QtNetwork.QSsl.TlsV1_2)\n    QtNetwork.QSslConfiguration.setDefaultConfiguration(default_config)\n\n\nclass WebEnginePage(QtWebEngineWidgets.QWebEnginePage):\n    def certificateError(self, certificateError):\n        """according to https://doc.qt.io/qtforpython/PySide2/QtWebEngineWidgets/QWebEngineCertificateError.html#PySide2.QtWebEngineWidgets.PySide2.QtWebEngineWidgets.QWebEngineCertificateError.ignoreCertificateError\n        #PySide2.QtWebEngineWidgets.QWebEngineCertificateError.ignoreCertificateError()\n        # here we allow self-signed certificate to load the web site directly\n        """\n        certificateError.ignoreCertificateError()\n        return super(WebEnginePage, self).certificateError(certificateError)\n        \n        # the following is for printing error message and types\n        print(certificateError.errorDescription(), certificateError.url(), certificateError.isOverridable())\n        error = certificateError.error()\n        if error == QtWebEngineWidgets.QWebEngineCertificateError.SslPinnedKeyNotInCertificateChain:\n            print("SslPinnedKeyNotInCertificateChain")\n        elif error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateCommonNameInvalid:\n            print("CertificateCommonNameInvalid")\n        elif error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateDateInvalid:\n            print("CertificateDateInvalid")\n        elif error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateAuthorityInvalid:\n            print("CertificateAuthorityInvalid")\n        elif error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateContainsErrors:\n            print("CertificateContainsErrors")\n        if error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateNoRevocationMechanism:\n            print("CertificateNoRevocationMechanism")\n        elif error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateUnableToCheckRevocation:\n            print("CertificateUnableToCheckRevocation")\n        elif error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateRevoked:\n            print("CertificateRevoked")\n        elif error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateInvalid:\n            print("CertificateAuthorityInvalid")\n        elif error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateWeakSignatureAlgorithm:\n            print("CertificateWeakSignatureAlgorithm")\n        elif error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateNonUniqueName:\n            print("CertificateNonUniqueName")\n        elif error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateWeakKey:\n            print("CertificateWeakKey")\n        elif error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateNameConstraintViolation:\n            print("CertificateNameConstraintViolation")\n        elif error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateValidityTooLong:\n            print("CertificateValidityTooLong")\n        elif error == QtWebEngineWidgets.QWebEngineCertificateError.CertificateTransparencyRequired:\n            print("CertificateTransparencyRequired")\n\n        return super(WebEnginePage, self).certificateError(certificateError)\n        \n\nclass MainWindow(QtWidgets.QMainWindow):\n    def __init__(self):\n        super(MainWindow, self).__init__()\n        self.tabs = QtWidgets.QTabWidget(\n            self, tabsClosable=True, movable=True, elideMode=QtCore.Qt.ElideRight\n        )\n        self.tabs.tabCloseRequested.connect(\n            lambda idx: self.tabs.widget(idx).deleteLater()\n        )\n        self.tabs.currentChanged.connect(self.currentTabChanged)\n        self.close_current_tab = QtWidgets.QAction(shortcut=QtGui.QKeySequence.Close)\n        self.close_current_tab.triggered.connect(\n            lambda: self.tabs.currentWidget().deleteLater()\n        )\n        self.addAction(self.close_current_tab)\n        self.setCentralWidget(self.tabs)\n        self.bars = {}\n        self.star_action = QtWidgets.QAction(\n            QtGui.QIcon.fromTheme("user-bookmarks"),\n            "Bookmark",\n            self,\n            checkable=True,\n            triggered=self.bookmarkPage,\n            shortcut="Ctrl+d",\n        )\n        self.tabs.setCornerWidget(\n            QtWidgets.QToolButton(\n                self,\n                text="New Tab",\n                icon=QtGui.QIcon.fromTheme("document-new"),\n                clicked=lambda: self.addTab().url.setFocus(),\n                shortcut=QtGui.QKeySequence.AddTab,\n            )\n        )\n        self.full_screen_action = QtWidgets.QAction(\n            "Full Screen", self, checkable=True, shortcut=QtGui.QKeySequence.FullScreen\n        )\n        self.full_screen_action.toggled.connect(\n            lambda v: self.showFullScreen() if v else self.showNormal()\n        )\n        self.addAction(self.full_screen_action)\n        self.bookmarks = self.get("bookmarks", {})\n        # Bookmarks seem broken\n        self.bookmarkPage()  # Load the bookmarks menu\n        self.history = self.get("history", []) + list(self.bookmarks.keys())\n        self.completer = QtWidgets.QCompleter(self.history)\n\n        # Downloads bar at the bottom of the window\n        self.downloads = QtWidgets.QToolBar("Downloads")\n        self.addToolBar(QtCore.Qt.BottomToolBarArea, self.downloads)\n\n        # Proxy support\n        proxy_url = QtCore.QUrl(os.environ.get("http_proxy", ""))\n        QtNetwork.QNetworkProxy.setApplicationProxy(\n            QtNetwork.QNetworkProxy(\n                QtNetwork.QNetworkProxy.HttpProxy\n                if proxy_url.scheme().startswith("http")\n                else QtNetwork.QNetworkProxy.Socks5Proxy,\n                proxy_url.host(),\n                proxy_url.port(),\n                proxy_url.userName(),\n                proxy_url.password(),\n            )\n        ) if "http_proxy" in os.environ else None\n\n        [self.addTab(QtCore.QUrl(u)) for u in self.get("tabs", [])]\n\n    def finished(self):\n        url = self.sender().url().toString()\n        bar, reply, fname, cancel = self.bars[url]\n        redirURL = reply.attribute(\n            QtNetwork.QNetworkRequest.RedirectionTargetAttribute\n        ).toString()\n        del self.bars[url]\n        bar.deleteLater()\n        cancel.deleteLater()\n        if redirURL and redirURL != url:\n            return self.fetch(redirURL, fname)\n\n        with open(fname, "wb") as f:\n            f.write(str(reply.readAll()))\n\n    def progress(self, received, total):\n        self.bars[self.sender().url().toString()][0].setValue(100.0 * received / total)\n\n    def closeEvent(self, ev):\n        self.put("history", self.history)\n        self.put(\n            "tabs", [self.tabs.widget(i).url.text() for i in range(self.tabs.count())]\n        )\n        return QtWidgets.QMainWindow.closeEvent(self, ev)\n\n    def put(self, key, value):\n        "Persist an object somewhere under a given key"\n        settings.setValue(key, json.dumps(value))\n        settings.sync()\n\n    def get(self, key, default=None):\n        "Get the object stored under \'key\' in persistent storage, or the default value"\n        v = settings.value(key)\n        return json.loads(v) if v else default\n\n    def addTab(self, url=QtCore.QUrl("")):\n        self.tabs.setCurrentIndex(self.tabs.addTab(Tab(url, self), ""))\n        return self.tabs.currentWidget()\n\n    def currentTabChanged(self, idx):\n        if self.tabs.widget(idx) is None:\n            return self.close()\n\n        self.setWindowTitle(self.tabs.widget(idx).web_view.title() or "De Vicenzo")\n\n    def bookmarkPage(self, v=None):\n        if v and v is not None:\n            self.bookmarks[\n                self.tabs.currentWidget().url.text()\n            ] = self.tabs.currentWidget().web_view.title()\n        elif v is not None:\n            del (self.bookmarks[self.tabs.currentWidget().url.text()])\n        self.star_action.setMenu(QtWidgets.QMenu())\n        [\n            self.star_action.menu().addAction(\n                QtWidgets.QAction(\n                    title,\n                    self,\n                    triggered=lambda u=QtCore.QUrl(url): self.tabs.currentWidget().load(\n                        u\n                    ),\n                )\n            )\n            for url, title in self.bookmarks.items()\n        ]\n        self.put("bookmarks", self.bookmarks)\n\n    def addToHistory(self, url):\n        self.history.append(url)\n        self.completer.setModel(\n            QtCore.QStringListModel(\n                list(set(list(self.bookmarks.keys()) + self.history))\n            )\n        )\n\n\nclass Tab(QtWidgets.QWidget):\n    def __init__(self, url, container):\n        super(Tab, self).__init__()\n        self.container = container\n        self.web_view = QtWebEngineWidgets.QWebEngineView()\n        self.progress_bar = QtWidgets.QProgressBar(\n            self.container.statusBar(), maximumWidth=120, visible=False\n        )\n        self.web_view.loadProgress.connect(\n            lambda v: (self.progress_bar.show(), self.progress_bar.setValue(v))\n            if self.amCurrent()\n            else None\n        )\n        self.web_view.loadFinished.connect(self.progress_bar.hide)\n        self.web_view.loadStarted.connect(\n            lambda: self.progress_bar.show() if self.amCurrent() else None\n        )\n        self.web_view.titleChanged.connect(\n            lambda t: container.tabs.setTabText(container.tabs.indexOf(self), t)\n            or (container.setWindowTitle(t) if self.amCurrent() else None)\n        )\n        self.web_view.iconChanged.connect(\n            lambda: container.tabs.setTabIcon(\n                container.tabs.indexOf(self), self.web_view.icon()\n            )\n        )\n        self.tb = QtWidgets.QToolBar("Main Toolbar", self)\n\n        layout = QtWidgets.QVBoxLayout()\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(self.tb, stretch=0)\n        layout.addWidget(self.web_view, stretch=1000)\n        layout.activate()\n        self.setLayout(layout)\n        for a, sc in [\n            [QtWebEngineWidgets.QWebEnginePage.Back, QtGui.QKeySequence.Back],\n            [QtWebEngineWidgets.QWebEnginePage.Forward, QtGui.QKeySequence.Forward],\n            [QtWebEngineWidgets.QWebEnginePage.Reload, QtGui.QKeySequence.Refresh],\n        ]:\n            self.tb.addAction(self.web_view.pageAction(a))\n            self.web_view.pageAction(a).setShortcut(sc)\n\n        def save_page(*a, view=self.web_view):\n            destination = QtWidgets.QFileDialog.getSaveFileName(self, "Save Page")\n            print(repr(destination))\n            if destination:\n                view.page().save(destination[0])\n\n        self.web_view.pageAction(\n            QtWebEngineWidgets.QWebEnginePage.SavePage\n        ).triggered.connect(save_page)\n\n        self.url = QtWidgets.QLineEdit()\n        self.url.returnPressed.connect(\n            lambda: self.web_view.load(QtCore.QUrl.fromUserInput(self.url.text()))\n        )\n        self.url.setCompleter(container.completer)\n        self.tb.addWidget(self.url)\n        self.tb.addAction(container.star_action)\n\n        self.web_view.urlChanged.connect(lambda u: self.url.setText(u.toString()))\n        self.web_view.urlChanged.connect(lambda u: container.addToHistory(u.toString()))\n        self.web_view.urlChanged.connect(\n            lambda u: container.star_action.setChecked(\n                u.toString() in container.bookmarks\n            )\n            if self.amCurrent()\n            else None\n        )\n\n        self.web_view.page().linkHovered.connect(\n            lambda l: container.statusBar().showMessage(l, 3000)\n        )\n\n        self.search = QtWidgets.QLineEdit(\n            self.web_view, visible=False, maximumWidth=200\n        )\n        self.search.returnPressed.connect(\n            lambda: self.web_view.findText(self.search.text())\n        )\n        self.search.textChanged.connect(\n            lambda: self.web_view.findText(self.search.text())\n        )\n        self.showSearch = QtWidgets.QShortcut(QtGui.QKeySequence.Find, self)\n        self.showSearch.activated.connect(\n            lambda: self.search.show() or self.search.setFocus()\n        )\n        self.hideSearch = QtWidgets.QShortcut(\n            "Esc", self, activated=lambda: (self.search.hide(), self.setFocus())\n        )\n\n        self.zoomIn = QtWidgets.QShortcut(QtGui.QKeySequence.ZoomIn, self)\n        self.zoomIn.activated.connect(\n            lambda: self.web_view.setZoomFactor(self.web_view.zoomFactor() + 0.2)\n        )\n        self.zoomOut = QtWidgets.QShortcut(QtGui.QKeySequence.ZoomOut, self)\n        self.zoomOut.activated.connect(\n            lambda: self.web_view.setZoomFactor(self.web_view.zoomFactor() - 0.2)\n        )\n        self.zoomOne = QtWidgets.QShortcut(\n            "Ctrl+0", self, activated=lambda: self.web_view.setZoomFactor(1)\n        )\n        self.urlFocus = QtWidgets.QShortcut("Ctrl+l", self, activated=self.url.setFocus)\n\n        page = WebEnginePage(self)\n        self.web_view.setPage(page)\n        page.load(QtCore.QUrl(url))\n        \n\n\n    def amCurrent(self):\n        return self.container.tabs.currentWidget() == self\n\n    def createWindow(self, windowType):\n        return self.container.addTab()\n\n\nif __name__ == "__main__":\n    app = QtWidgets.QApplication(sys.argv)\n    wb = MainWindow()\n    for url in sys.argv[1:]:\n        wb.addTab(QtCore.QUrl.fromUserInput(url))\n    if wb.tabs.count() == 0:\n        wb.addTab(QtCore.QUrl("http://mde.tw"))\n    wb.show()\n    sys.exit(app.exec_())\n \n \n', 'tags': '', 'url': 'KMOLBrowser.html'}, {'title': 'Glowscript', 'text': 'https://www.glowscript.org/ \xa0 \n https://github.com/vpython/glowscript \xa0 \n https://github.com/atsepkov/RapydScript \xa0 \n Examples \n \n \n \n \n \n', 'tags': '', 'url': 'Glowscript.html'}, {'title': 'Rapydscript', 'text': 'Test embedded RapydScript \n \n \n Add from 1 to 10 \n Source Codes: \n <h4>Test embedded RapydScript</h4>\n<script src="https://sw.kovidgoyal.net/rapydscript/repl/rapydscript.js"></script>\n<script>// <![CDATA[\nvar compiler = RapydScript.create_embedded_compiler();\nvar js = compiler.compile(`\ndef hello_world():\n    sum=0\n    for i in range(11):\n        sum=sum+i\n    print(sum)\n    alert("from 1 add to 10 is :" + str(sum))`);\nfunction mySum() {\n    document.body.textContent = js;\n    eval(js);\n    eval(\'hello_world()\');\n};\n// ]]></script>\n<p><button onclick="mySum()">Add from 1 to 10</button></p> \n \n', 'tags': '', 'url': 'Rapydscript.html'}, {'title': 'Atoms', 'text': '\n \n \n \n \n \n Source Codes: \n <div class="glowscript" id="glowscript">\n<script type="text/javascript" src="https://s3.amazonaws.com/glowscript/lib/jquery/2.1/jquery.min.js"></script>\n<script type="text/javascript" src="https://s3.amazonaws.com/glowscript/lib/jquery/2.1/jquery-ui.custom.min.js"></script>\n<script type="text/javascript" src="https://s3.amazonaws.com/glowscript/package/glow.3.0.min.js"></script>\n<script type="text/javascript">// <![CDATA[\n//--><![CDATA[//><!--\n\n// START JAVASCRIPT\n;(function() {;\nasync function __main__() {\n"use strict";\n\nvar version = ["3.0", "glowscript"];\nArray.prototype.toString = function() { return __parsearray(this) };\nvar scene = canvas();\nvar vector = vec;\nvar axes = [vec(1,0,0), vec(0,1,0), vec(0,0,1)]\n\nvar k = 1\nvar m = 1\nvar spacing = 1.0\nvar atom_radius = 0.3["*"](spacing)\nvar L0 = spacing["-"](1.8["*"](atom_radius))\nvar V0 = pi["*"](pow(0.5["*"](atom_radius),2))["*"](L0) // initial volume of spring\nvar N = 3\nvar crystal = makeCrystal(N, atom_radius, spacing, 0.1["*"](spacing)["*"](sqrt(k["/"](m))))\nscene.center = 0.5["*"](N["-"](1))["*"](vec(1,1,1))\nscene.autoscale = false\nvar dt = 0.04["*"](2["*"](pi)["*"](sqrt(m["/"](k))))\n\n// Display text below the 3D graphics:\nscene.title = "A model of a solid represented as atoms connected by interatomic bonds"\n\nfunction makeCrystal( N, atom_radius, spacing, momentumRange ) {\n    var crystal = { atoms:[], springs:[] }\n    var atom\n    var x,y,z\n\n    function atomAt(np) {\n        if (np.x[">="](0) && np.y[">="](0) && np.z[">="](0) && np.x["<"](N) && np.y["<"](N) && np.z["<"](N))\n            return crystal.atoms[np.x["+"](np.y["*"](N))["+"](np.z["*"](N)["*"](N))]\n        // Otherwise create an invisible wall and return it\n        var w = box()\n        w.visible = false  // comment out to see the true model\n        w.size = atom_radius["*"](vec(1,1,1))\n        w.pos = np["*"](spacing)\n        w.momentum = vec(0,0,0)\n        return w\n    }\n\n    // Create N^3 atoms in a grid\n    for(z=0; z["<"](N); z++)\n        for(y=0; y["<"](N); y++)\n            for(x=0; x["<"](N); x++) {\n                atom = sphere()\n                atom.pos = vec(x,y,z)["*"](spacing)\n                atom.size = 2["*"](atom_radius)["*"](vec(1,1,1))\n                atom.color = vec(0,0.58,0.69)\n                atom.momentum = momentumRange["*"](vec.random())\n                crystal.atoms.push( atom )\n            }\n    \n    // Create a grid of springs linking each atom to the adjacent atoms\n    // in each dimension, or to invisible walls where no atom is adjacent\n    for(var d=0; d["<"](3); d++)\n        for(z=1["-u"](); z["<"](N); z++)\n            for(y=1["-u"](); y["<"](N); y++)\n                for(x=1["-u"](); x["<"](N); x++) {\n                    atom = atomAt(vec(x,y,z))\n                    var neighbor = atomAt(vec(x,y,z)["+"](axes[d]))\n\n                    if (atom.visible || neighbor.visible) {\n                        var spring = helix()\n                        spring.visible = atom.visible && neighbor.visible\n                        spring.thickness = 0.05\n                        spring.size = vec(spacing,atom_radius,atom_radius)\n                        spring.atoms = [ atom, neighbor ]\n                        spring.color = vec(1,0.5,0)\n                        crystal.springs.push(spring)\n                    }\n                }\n    return crystal\n}\n\nwhile (true) {\n    await rate(60)\n    for(var a=0; a["<"](crystal.atoms.length); a++) {\n        var atom = crystal.atoms[a]\n        atom.pos = atom.pos["+"](atom.momentum["/"](m)["*"](dt))\n    }\n    for(var s=0; s["<"](crystal.springs.length); s++) {\n        var spring = crystal.springs[s]\n        spring.axis = spring.atoms[1].pos["-"](spring.atoms[0].pos)\n        var L = mag(spring.axis)\n        spring.axis = spring.axis.norm()\n        spring.pos = spring.atoms[0].pos["+"](0.5["*"](atom_radius)["*"](spring.axis))\n        var Ls = L["-"](1["*"](atom_radius))\n        spring.size.x = Ls\n        var Fdt = spring.axis["*"](k["*"](dt)["*"](1["-"](spacing["/"](L))))\n        spring.atoms[0].momentum = spring.atoms[0].momentum["+"](Fdt)\n        spring.atoms[1].momentum = spring.atoms[1].momentum["-"](Fdt)\n    }\n}\n\n}\n;$(function(){ window.__context = { glowscript_container: $("#glowscript").removeAttr("id") }; __main__() })})()\n// END JAVASCRIPT\n\n//--><!\n// ]]></script>\n</div> \n \n', 'tags': '', 'url': 'Atoms.html'}, {'title': 'Samples', 'text': '\n \n \n \n \n \n Source Codes: \n <div class="glowscript" id="glowscript">\n<script type="text/javascript" src="https://s3.amazonaws.com/glowscript/lib/jquery/2.1/jquery.min.js"></script>\n<script type="text/javascript" src="https://s3.amazonaws.com/glowscript/lib/jquery/2.1/jquery-ui.custom.min.js"></script>\n<script type="text/javascript" src="https://s3.amazonaws.com/glowscript/package/glow.3.0.min.js"></script>\n<script type="text/javascript">\n\n// START JAVASCRIPT\n;(function() {;\nasync function __main__() {\n"use strict";\n\nvar version = ["3.0", "glowscript"];\nArray.prototype.toString = function() { return __parsearray(this) };\nvar scene = canvas();\nvar vector = vec;\n\nscene.title = "A ball bounces in a box"\n\nvar side = 4.0\nvar thk = 0.3\nvar s2 = 2["*"](side)["-"](thk)\nvar s3 = 2["*"](side)["+"](thk)\nvar wallR = box ( {pos:vec( side, 0, 0), size:vec(thk,s2,s3),  color : color.red} )\nvar wallL = box ( {pos:vec(side["-u"](), 0, 0), size:vec(thk,s2,s3),  color : color.red} )\nvar wallB = box ( {pos:vec(0, side["-u"](), 0), size:vec(s3,thk,s3),  color : color.blue} )\nvar wallT = box ( {pos:vec(0,  side, 0), size:vec(s3,thk,s3),  color : color.blue} )\nvar wallBK = box( {pos:vec(0, 0, side["-u"]()), size:vec(s2,s2,thk), color : color.gray(0.7)} )\n\nvar ball = sphere ( {color : color.green, size : 0.8["*"](vec(1,1,1))} )\nball.mass = 1.0\nball.p = vec (0.15["-u"](), 0.23["-u"](), 0.27)\nattach_trail(ball, {pps:200, retain:100, color:ball.color})\n\nside = side["-"](thk["*"](0.5))["-"](ball.size.x["/"](2))\nvar dt = 0.3\n\nwhile ( true) { \n  // The rate statement tells GlowScript to execute the while statements\n  // about 200 times per second. The "wait" keyword is necessary to permit\n  // periodic updates to the window.\n  await rate(200)\n  ball.pos = ball.pos["+"](ball.p["/"](ball.mass)["*"](dt))\n  if (! (side["-u"]()["<"](ball.pos.x) && ball.pos.x["<"](side))) { \n    ball.p.x = ball.p.x["-u"]()\n  }\n  if (! (side["-u"]()["<"](ball.pos.y) && ball.pos.y["<"](side))) { \n    ball.p.y = ball.p.y["-u"]()\n  }\n  if (! (side["-u"]()["<"](ball.pos.z) && ball.pos.z["<"](side))) { \n    ball.p.z = ball.p.z["-u"]()\n  }\n}\n\n}\n;$(function(){ window.__context = { glowscript_container: $("#glowscript").removeAttr("id") }; __main__() })})()\n// END JAVASCRIPT\n</script>\n</div> \n \n', 'tags': '', 'url': 'Samples.html'}, {'title': 'RLearning', 'text': 'Train a model to balance a pole on a cart using reinforcement learning. \n Description \n This example illustrates how to use TensorFlow.js to perform simple  reinforcement learning  (RL). Specifically, it showcases an implementation of the policy-gradient method in TensorFlow.js. This implementation is used to solve the classic  cart-pole control problem. \n Through  self play  the agent will learn to balance the pole for as many  steps  as it can. \n Instructions \n \n \n Choose a hidden layer size and click "Create Model". \n Select training parameters and then click "Train". \n Note that while the model is training it periodically saves a copy of itself to local browser storage, this mean you can refresh the page and continue training from the last save point. If at any point you want to start training from scratch, click "Delete stored Model". \n Once the model has finished training you can click "Test" to see how many \'steps\' the agent can balance the pole for. You can also click \'Stop\' to pause the training after the current iteration ends if you want to test the model sooner. \n During training and testing a small simulation of the agent behaviour will be rendered. \n \n Status \n Standing by. \n \n Initialize Model \n \n \n Hidden layer size(s) (e.g.: "256", "32,64"):   \n Create model \n \n Locally-stored model   \n Delete stored model \n \n Training Parameters \n \n Number of iterations:   \n Games per iteration:   \n Max. steps per game:   \n Reward discount rate:   \n Learning rate:   \n Render during training:     Uncheck me to speed up training. \n Train   Test \n \n \n Training Progress \n \n Iteration #:   \n Game #:   \n Training speed:   \n \n \n Simulation \n \n \n \n \n \n \n \n  Import tfjs-vis  \n \n \n \n \n \n \n', 'tags': '', 'url': 'RLearning.html'}, {'title': 'Ebooks', 'text': '2010 Feedback and Control for Everyone: \n https://link.springer.com/book/10.1007/978-3-642-03446-6 \n 2012 Mechatronic Systems:\xa0 \n https://link.springer.com/book/10.1007/978-3-642-22324-2 \xa0 \n 2015 Feedback Control: \n https://link.springer.com/book/10.1007/978-1-4471-6675-7 \n 2018\xa0Reinforcement Learning for Optimal Feedback Control: \n https://link.springer.com/book/10.1007/978-3-319-78384-0 \xa0 \n 2019 Python for Control.pdf \n 2020 Feedback: \n https://link.springer.com/book/10.1007/978-3-030-34839-7 \xa0 \n \n', 'tags': '', 'url': 'Ebooks.html'}, {'title': 'Feedback', 'text': "針對 CoppeliaSim 中 Python Remote API 不提供的功能, 可以透過 Lua 製作, 然後再以  https://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm#simxCallScriptFunction  呼叫. 相關討論請參考  https://forum.coppeliarobotics.com/viewtopic.php?t=7699 \n 以下的 Inverted Pedulum 控制模擬可以視為專題 Task 之一: \n https://github.com/mdecourse/vrep_inverted_pendulum  採用舊版的 Python2 以及舊版的 V-rep 製作, 可以嘗試改為 Python3 以及 CoppeliaSim 4.1.0 rev1 版本相容. \n Webots Inverted Pendulum: \n https://robotbenchmark.net/benchmark/inverted_pendulum/ \xa0 \n https://github.com/mdecourse/vrep-stuff \n inverted pendulum system modeling \n simulation of the inverted pendulum.pdf \n solve the inverted pendulum problem using DQN algorithm \n https://in.mathworks.com/help/control/ug/control-of-an-inverted-pendulum-on-a-cart.html \n \xa0磁浮控制系統: \n Magnetic levitation control.pdf \n Controller Design for a Magnetic Levitation Kit usingOpenModelica’s Integration with the Julia Language.pdf \n CoppeliaSim Lua feedback PID Control: \n function saturate(x,thr)\n    if x>thr then return thr end\n    if x<-thr then return -thr end\n    return x\nend\n\nfunction PID_create(Kp,Ki,Kd)\n    pid={}\n    pid.pre_error=0.0\n    pid.integral=0.0\n    pid.Kp=Kp\n    pid.Ki=Ki\n    pid.Kd=Kd\n    return pid\nend\n\nfunction PID(pid, setpoint, actual_position, dt)\n    error=setpoint-actual_position\n    if pid.Ki>0.0 then\n        pid.integral=pid.integral+error*dt\n    end\n    derivative=(error-pid.pre_error)/dt\n    output=pid.Kp*error+saturate(pid.Ki*pid.integral,1000)+pid.Kd*derivative\n    output=saturate(output,2000)\n    pid.pre_error=error\n    return output\nend\n\nif (sim_call_type==sim.syscb_init) then\n    --graph=sim.getObjectHandle('Graph')\n    pjoint=sim.getObjectHandle('pjoint')\n    rjoint1=sim.getObjectHandle('rjoint1')\n    pad=sim.getObjectHandle('pad')\n    pidRot=PID_create(64.05,34.65,0.709)\n    pidPos=PID_create(54,0,0.629)\n    sim.addStatusbarMessage('angle controller = { P='..pidRot.Kp..'  I='..pidRot.Ki..'  D='..pidRot.Kd..' }   horizontal controller = { P='..pidPos.Kp..'  I='..pidPos.Ki..'  D='..pidPos.Kd..' }')\nend\n\nif (sim_call_type==sim.syscb_actuation) then  \n    dt=sim.getSimulationTimeStep()\n    u_angle=PID(pidRot, 0, sim.getJointPosition(rjoint1), dt)\n    u_pos=PID(pidPos, 0, sim.getJointPosition(pjoint), dt)\n   -- sim.setGraphUserData(graph,'e_ang',pid1.pre_error)\n   -- sim.setGraphUserData(graph,'e_pos',pid2.pre_error)\n    u=u_angle-u_pos\n    sim.setJointTargetVelocity(pjoint,u)\nend \n \n", 'tags': '', 'url': 'Feedback.html'}, {'title': 'CMSiMDE', 'text': 'https://github.com/mdecourse/cmsimde \xa0是一套以 Python + Flask 建構的網際內容管理系統, 以單人管理的模式建立, 其中包含動態網頁系統, 靜態網頁系統, Pelican 網誌與 Reveal.js 網際簡報系統. \n https://github.com/mdecourse/cmsimde \xa0執行需要: \n pip install flask flask_cors lxml bs4 markdown pelican leo \n 等模組. \n', 'tags': '', 'url': 'CMSiMDE.html'}, {'title': 'Git', 'text': '常用 Git 指令: \n git clone --recurse-submodules  https://github.com/mdecourse/cp2020.git \n git submodule add  https://github.com/mdecourse/cmsimde.git \xa0cmsimde \n git remote add origin https://github.com/mdecourse/wcm1kmolinfo.git git add . git commit -m "message" git push -u --allow-unrelated-histories origin master \n git push --set-upstream origin master \n', 'tags': '', 'url': 'Git.html'}, {'title': 'Windows', 'text': 'Windows 10 64 位元電腦中的可攜程式環境\xa0 \n NX 高端電腦輔助機械設計套件 \n 登入 @gm 帳號, \xa0 下載 NX12 可攜版 \xa0(949MB) \n 配置 2004 版本後測試 Python 可攜程式環境, 用來建立  CMSiMDE  近端工作環境 (含  NX12  與  CoppeliaSim  操作) \n 在 2004 版次中安裝 WSL 2, 安裝 Ubuntu 20.04 後啟用  CMSiMDE  工作環境\xa0 \xa0(含  NX12  與  CoppeliaSim  操作) \n 建立  Virtualbox   NX12  認證主機 \n \n', 'tags': '', 'url': 'Windows.html'}, {'title': 'Ubuntu', 'text': "在  Virtualbox  與實體主機中利用 純 IPv6 網址, 配置  Ubuntu  20.04 部署動態與靜態  CMSiMDE  網站 (含  Let's Encrypt  https 設置). \n 在  Virtualbox  與實體主機中利用 純 IPv6 網址,\xa0配置  CoppeliaSim  模擬系統, 用於建立虛擬機電控制系統. \n \n", 'tags': '', 'url': 'Ubuntu.html'}, {'title': 'Heorku', 'text': '將近端與自架伺服器中的  CMSiMDE  靜態網頁部署至  Heroku . \n 利用  Heroku  中的動態 Flask 程式與自架伺服器中的  CoppeliaSim  模擬系統互動. \n Heroku 操作 \n 登入 @gm  下載 Heroku cli 可攜.7z , 解開壓縮檔案後, 在 start.bat 中將 Heroku bin 設定指令搜尋路徑, 重新啟動後, 以 heroku version 確定指令可以正常執行後, heroku login 成功後, 登入帳號密碼會存入 home/_netrc 中. 之後便可直接透過 heroku cli 指令直接對遠端主機下命令. \n', 'tags': '', 'url': 'Heorku.html'}, {'title': 'Certbot', 'text': 'https://letsencrypt.org/ \xa0 \n 以下為實體主機配置 Certbot 時傳回資料: \n IMPORTANT NOTES: \xa0- Congratulations! Your certificate and chain have been saved at: \xa0\xa0 /etc/letsencrypt/live/jcad.kmol.info/fullchain.pem \xa0\xa0 Your key file has been saved at: \xa0\xa0 /etc/letsencrypt/live/jcad.kmol.info/privkey.pem \xa0\xa0 Your cert will expire on 2020-12-18. To obtain a new or tweaked \xa0\xa0 version of this certificate in the future, simply run certbot \xa0\xa0 again. To non-interactively renew *all* of your certificates, run \xa0\xa0 "certbot renew" \xa0- Your account credentials have been saved in your Certbot \xa0\xa0 configuration directory at /etc/letsencrypt. You should make a \xa0\xa0 secure backup of this folder now. This configuration directory will \xa0\xa0 also contain certificates and private keys obtained by Certbot so \xa0\xa0 making regular backups of this folder is ideal. \n Test automatic renewal The Certbot packages on your system come with a cron job or systemd timer that will renew your certificates automatically before they expire. You will not need to run Certbot again, unless you change your configuration. You can test automatic renewal for your certificates by running this command: sudo certbot renew --dry-run The command to renew certbot is installed in one of the following locations: \xa0\xa0\xa0 /etc/crontab/ \xa0\xa0\xa0 /etc/cron.*/* \xa0\xa0\xa0 systemctl list-timers \n \n', 'tags': '', 'url': 'Certbot.html'}]};