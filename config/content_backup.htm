<h1>About</h1>
<p><a href="/downloads/introduction_to_automatic_control_system.pdf">Introduction to Automatic Control System.pdf</a></p>
<h4>網際機電整合控制系統設計案例研究</h4>
<h4>A Case Study on the Design of Web-based Mechatronic Automatic Control System</h4>
<h4>Members:</h4>
<p style="padding-left: 30px;">50733105</p>
<p style="padding-left: 30px;">50733152</p>
<p style="padding-left: 30px;">507331</p>
<p style="padding-left: 30px;">507331</p>
<h4>Methodology:</h4>
<ul>
<li>Use <a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_help/#uid:index">NX12</a>, <a href="https://www.onshape.com/">Onshape</a> and <a href="http://solvespace.com/index.pl">Solvespace</a> to create sytem part assembly</li>
<li><a href="https://en.wikipedia.org/wiki/STL_(file_format)">STL</a> to <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> and/or Webots</li>
<li>Classic Control to Modern Control system design</li>
<li>Flask + uwsgi on Ubuntu and Windows 10 2004</li>
<li>Machine Learning and Optimal Control System Design</li>
</ul><h1>Ebooks</h1>
<p>2005 Product Engineering:</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/1-4020-2933-0">https://link.springer.com/book/10.1007/1-4020-2933-0</a> </p>
<p>2010 Feedback and Control for Everyone:</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-642-03446-6">https://link.springer.com/book/10.1007/978-3-642-03446-6</a> </p>
<p>2012 Mechatronic Systems: </p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-642-22324-2">https://link.springer.com/book/10.1007/978-3-642-22324-2</a> </p>
<p>2015 Feedback Control:</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4471-6675-7">https://link.springer.com/book/10.1007/978-1-4471-6675-7</a></p>
<p>2018 Reinforcement Learning for Optimal Feedback Control:</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-78384-0">https://link.springer.com/book/10.1007/978-3-319-78384-0</a> </p>
<p>2020 Feedback:</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-030-34839-7">https://link.springer.com/book/10.1007/978-3-030-34839-7</a> </p>
<p></p><h1>Feedback</h1>
<p style="padding-left: 30px;">針對 CoppeliaSim 中 Python Remote API 不提供的功能, 可以透過 Lua 製作, 然後再以 <a href="https://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm#simxCallScriptFunction">https://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm#simxCallScriptFunction</a> 呼叫. 相關討論請參考 <a href="https://forum.coppeliarobotics.com/viewtopic.php?t=7699">https://forum.coppeliarobotics.com/viewtopic.php?t=7699</a></p>
<h4><span style="background-color: #ffff99;">以下的 Inverted Pedulum 控制模擬可以視為專題 Task 之一:</span></h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/vrep_inverted_pendulum">https://github.com/mdecourse/vrep_inverted_pendulum</a> 採用舊版的 Python2 以及舊版的 V-rep 製作, 可以嘗試改為 Python3 以及 CoppeliaSim 4.1.0 rev1 版本相容.</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/vrep-stuff">https://github.com/mdecourse/vrep-stuff</a> </p>
<p style="padding-left: 30px;"><a href="http://ctms.engin.umich.edu/CTMS/index.php?example=InvertedPendulum&amp;section=SystemModeling">inverted pendulum system modeling</a></p>
<p style="padding-left: 30px;"><a href="/downloads/simulation of the inverted pendulum.pdf">simulation of the inverted pendulum.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://ieeexplore.ieee.org/document/8833168">solve the inverted pendulum problem using DQN algorithm</a></p>
<p style="padding-left: 30px;"><a href="https://in.mathworks.com/help/control/ug/control-of-an-inverted-pendulum-on-a-cart.html">https://in.mathworks.com/help/control/ug/control-of-an-inverted-pendulum-on-a-cart.html</a></p>
<p>CoppeliaSim Lua feedback PID Control:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function saturate(x,thr)
    if x&gt;thr then return thr end
    if x&lt;-thr then return -thr end
    return x
end

function PID_create(Kp,Ki,Kd)
    pid={}
    pid.pre_error=0.0
    pid.integral=0.0
    pid.Kp=Kp
    pid.Ki=Ki
    pid.Kd=Kd
    return pid
end

function PID(pid, setpoint, actual_position, dt)
    error=setpoint-actual_position
    if pid.Ki&gt;0.0 then
        pid.integral=pid.integral+error*dt
    end
    derivative=(error-pid.pre_error)/dt
    output=pid.Kp*error+saturate(pid.Ki*pid.integral,1000)+pid.Kd*derivative
    output=saturate(output,2000)
    pid.pre_error=error
    return output
end

if (sim_call_type==sim.syscb_init) then
    --graph=sim.getObjectHandle('Graph')
    pjoint=sim.getObjectHandle('pjoint')
    rjoint1=sim.getObjectHandle('rjoint1')
    pad=sim.getObjectHandle('pad')
    pidRot=PID_create(64.05,34.65,0.709)
    pidPos=PID_create(54,0,0.629)
    sim.addStatusbarMessage('angle controller = { P='..pidRot.Kp..'  I='..pidRot.Ki..'  D='..pidRot.Kd..' }   horizontal controller = { P='..pidPos.Kp..'  I='..pidPos.Ki..'  D='..pidPos.Kd..' }')
end

if (sim_call_type==sim.syscb_actuation) then  
    dt=sim.getSimulationTimeStep()
    u_angle=PID(pidRot, 0, sim.getJointPosition(rjoint1), dt)
    u_pos=PID(pidPos, 0, sim.getJointPosition(pjoint), dt)
   -- sim.setGraphUserData(graph,'e_ang',pid1.pre_error)
   -- sim.setGraphUserData(graph,'e_pos',pid2.pre_error)
    u=u_angle-u_pos
    sim.setJointTargetVelocity(pjoint,u)
end</pre>
<p></p><h1>CMSiMDE</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 是一套以 Python + Flask 建構的網際內容管理系統, 以單人管理的模式建立, 其中包含動態網頁系統, 靜態網頁系統, Pelican 網誌與 Reveal.js 網際簡報系統.</p>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 執行需要:</p>
<p style="padding-left: 30px;">pip install flask flask_cors lxml bs4 markdown pelican leo</p>
<p style="padding-left: 30px;">等模組.</p><h2>Git</h2>
<h4>常用 Git 指令:</h4>
<p style="padding-left: 30px;">git clone --recurse-submodules <a href="https://github.com/mdecourse/cp2020.git">https://github.com/mdecourse/cp2020.git</a></p>
<p style="padding-left: 30px;">git submodule add <a href="https://github.com/mdecourse/cmsimde.git">https://github.com/mdecourse/cmsimde.git</a> cmsimde</p>
<p style="padding-left: 30px;">git remote add origin https://github.com/mdecourse/wcm1kmolinfo.git<br/>git add .<br/>git commit -m "message"<br/>git push -u --allow-unrelated-histories origin master</p>
<p style="padding-left: 30px;">git push --set-upstream origin master</p><h2>Windows</h2>
<h4>Windows 10 64 位元電腦中的可攜程式環境 </h4>
<h4 style="padding-left: 30px;">NX 高端電腦輔助機械設計套件</h4>
<p style="padding-left: 60px;">登入 @gm 帳號,<span> </span><a href="https://drive.google.com/file/d/1tiuq-KGeoCNA63IEkEWhGzSTFgdQUVM_/view?usp=sharing">下載 NX12 可攜版</a> (949MB)</p>
<p style="padding-left: 30px;">配置 2004 版本後測試 Python 可攜程式環境, 用來建立 <a href="https://github.com/mdecourse/cmsimde">CMSiMDE</a> 近端工作環境 (含 <a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_help/#uid:index">NX12</a> 與 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 操作)</p>
<p style="padding-left: 30px;">在 2004 版次中安裝 WSL 2, 安裝 Ubuntu 20.04 後啟用 <a href="https://github.com/mdecourse/cmsimde">CMSiMDE</a> 工作環境 <span> (含 <a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_help/#uid:index">NX12</a> 與 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 操作)</span></p>
<p style="padding-left: 30px;"><span>建立 <a href="https://www.virtualbox.org/">Virtualbox</a> <a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_help/#uid:index">NX12</a> 認證主機</span></p>
<p style="padding-left: 30px;"></p><h2>Ubuntu</h2>
<p>在 <a href="https://www.virtualbox.org/">Virtualbox</a> 與實體主機中利用 純 IPv6 網址, 配置 <a href="https://ubuntu.com/">Ubuntu</a> 20.04 部署動態與靜態 <a href="https://github.com/mdecourse/cmsimde">CMSiMDE</a> 網站 (含 <a href="https://letsencrypt.org/">Let's Encrypt</a> https 設置).</p>
<p><span>在 <a href="https://www.virtualbox.org/">Virtualbox</a> 與實體主機中利用 純 IPv6 網址, 配置 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 模擬系統, 用於建立虛擬機電控制系統.</span></p>
<p></p><h2>Heorku</h2>
<p>將近端與自架伺服器中的 <a href="https://github.com/mdecourse/cmsimde">CMSiMDE</a> 靜態網頁部署至 <a href="https://www.heroku.com/">Heroku</a>.</p>
<p>利用 <a href="https://www.heroku.com/">Heroku</a> 中的動態 Flask 程式與自架伺服器中的 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 模擬系統互動.</p><h2>Certbot</h2>
<p><a href="https://letsencrypt.org/">https://letsencrypt.org/</a> </p>
<h4>以下為實體主機配置 Certbot 時傳回資料:</h4>
<p style="padding-left: 30px;">IMPORTANT NOTES:<br/> - Congratulations! Your certificate and chain have been saved at:<br/>   /etc/letsencrypt/live/jcad.kmol.info/fullchain.pem<br/>   Your key file has been saved at:<br/>   /etc/letsencrypt/live/jcad.kmol.info/privkey.pem<br/>   Your cert will expire on 2020-12-18. To obtain a new or tweaked<br/>   version of this certificate in the future, simply run certbot<br/>   again. To non-interactively renew *all* of your certificates, run<br/>   "certbot renew"<br/> - Your account credentials have been saved in your Certbot<br/>   configuration directory at /etc/letsencrypt. You should make a<br/>   secure backup of this folder now. This configuration directory will<br/>   also contain certificates and private keys obtained by Certbot so<br/>   making regular backups of this folder is ideal.</p>
<p style="padding-left: 30px;">Test automatic renewal<br/><br/>The Certbot packages on your system come with a cron job or systemd timer that will renew your certificates automatically before they expire. You will not need to run Certbot again, unless you change your configuration. You can test automatic renewal for your certificates by running this command:<br/><br/>sudo certbot renew --dry-run<br/><br/>The command to renew certbot is installed in one of the following locations:<br/><br/>    /etc/crontab/<br/>    /etc/cron.*/*<br/>    systemctl list-timers</p>
<p style="padding-left: 30px;"></p>
<p></p>